/**
 * generated by Xtext 2.16.0
 */
package org.xtext.example.scoping.scoping;

import org.eclipse.emf.ecore.EAttribute;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.ecore.EReference;

/**
 * <!-- begin-user-doc -->
 * The <b>Package</b> for the model.
 * It contains accessors for the meta objects to represent
 * <ul>
 *   <li>each class,</li>
 *   <li>each feature of each class,</li>
 *   <li>each enum,</li>
 *   <li>and each data type</li>
 * </ul>
 * <!-- end-user-doc -->
 * @see org.xtext.example.scoping.scoping.ScopingFactory
 * @model kind="package"
 * @generated
 */
public interface ScopingPackage extends EPackage
{
  /**
   * The package name.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  String eNAME = "scoping";

  /**
   * The package namespace URI.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  String eNS_URI = "http://www.xtext.org/example/scoping/Scoping";

  /**
   * The package namespace name.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  String eNS_PREFIX = "scoping";

  /**
   * The singleton instance of the package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  ScopingPackage eINSTANCE = org.xtext.example.scoping.scoping.impl.ScopingPackageImpl.init();

  /**
   * The meta object id for the '{@link org.xtext.example.scoping.scoping.impl.BookImpl <em>Book</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.example.scoping.scoping.impl.BookImpl
   * @see org.xtext.example.scoping.scoping.impl.ScopingPackageImpl#getBook()
   * @generated
   */
  int BOOK = 0;

  /**
   * The feature id for the '<em><b>Name</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int BOOK__NAME = 0;

  /**
   * The feature id for the '<em><b>Imports</b></em>' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int BOOK__IMPORTS = 1;

  /**
   * The feature id for the '<em><b>Chapters</b></em>' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int BOOK__CHAPTERS = 2;

  /**
   * The number of structural features of the '<em>Book</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int BOOK_FEATURE_COUNT = 3;

  /**
   * The meta object id for the '{@link org.xtext.example.scoping.scoping.impl.DImportImpl <em>DImport</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.example.scoping.scoping.impl.DImportImpl
   * @see org.xtext.example.scoping.scoping.impl.ScopingPackageImpl#getDImport()
   * @generated
   */
  int DIMPORT = 1;

  /**
   * The feature id for the '<em><b>Imported Namespace</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int DIMPORT__IMPORTED_NAMESPACE = 0;

  /**
   * The number of structural features of the '<em>DImport</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int DIMPORT_FEATURE_COUNT = 1;

  /**
   * The meta object id for the '{@link org.xtext.example.scoping.scoping.impl.ChapterImpl <em>Chapter</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.example.scoping.scoping.impl.ChapterImpl
   * @see org.xtext.example.scoping.scoping.impl.ScopingPackageImpl#getChapter()
   * @generated
   */
  int CHAPTER = 2;

  /**
   * The feature id for the '<em><b>Name</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int CHAPTER__NAME = 0;

  /**
   * The feature id for the '<em><b>Chapter</b></em>' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int CHAPTER__CHAPTER = 1;

  /**
   * The feature id for the '<em><b>Paragraphs</b></em>' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int CHAPTER__PARAGRAPHS = 2;

  /**
   * The feature id for the '<em><b>References</b></em>' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int CHAPTER__REFERENCES = 3;

  /**
   * The number of structural features of the '<em>Chapter</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int CHAPTER_FEATURE_COUNT = 4;

  /**
   * The meta object id for the '{@link org.xtext.example.scoping.scoping.impl.ParagraphImpl <em>Paragraph</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.example.scoping.scoping.impl.ParagraphImpl
   * @see org.xtext.example.scoping.scoping.impl.ScopingPackageImpl#getParagraph()
   * @generated
   */
  int PARAGRAPH = 3;

  /**
   * The feature id for the '<em><b>Name</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int PARAGRAPH__NAME = 0;

  /**
   * The number of structural features of the '<em>Paragraph</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int PARAGRAPH_FEATURE_COUNT = 1;

  /**
   * The meta object id for the '{@link org.xtext.example.scoping.scoping.impl.ReferenceImpl <em>Reference</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.example.scoping.scoping.impl.ReferenceImpl
   * @see org.xtext.example.scoping.scoping.impl.ScopingPackageImpl#getReference()
   * @generated
   */
  int REFERENCE = 4;

  /**
   * The feature id for the '<em><b>Cref</b></em>' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int REFERENCE__CREF = 0;

  /**
   * The feature id for the '<em><b>Qnref</b></em>' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int REFERENCE__QNREF = 1;

  /**
   * The feature id for the '<em><b>Pref</b></em>' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int REFERENCE__PREF = 2;

  /**
   * The number of structural features of the '<em>Reference</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int REFERENCE_FEATURE_COUNT = 3;


  /**
   * Returns the meta object for class '{@link org.xtext.example.scoping.scoping.Book <em>Book</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>Book</em>'.
   * @see org.xtext.example.scoping.scoping.Book
   * @generated
   */
  EClass getBook();

  /**
   * Returns the meta object for the attribute '{@link org.xtext.example.scoping.scoping.Book#getName <em>Name</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute '<em>Name</em>'.
   * @see org.xtext.example.scoping.scoping.Book#getName()
   * @see #getBook()
   * @generated
   */
  EAttribute getBook_Name();

  /**
   * Returns the meta object for the containment reference list '{@link org.xtext.example.scoping.scoping.Book#getImports <em>Imports</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference list '<em>Imports</em>'.
   * @see org.xtext.example.scoping.scoping.Book#getImports()
   * @see #getBook()
   * @generated
   */
  EReference getBook_Imports();

  /**
   * Returns the meta object for the containment reference list '{@link org.xtext.example.scoping.scoping.Book#getChapters <em>Chapters</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference list '<em>Chapters</em>'.
   * @see org.xtext.example.scoping.scoping.Book#getChapters()
   * @see #getBook()
   * @generated
   */
  EReference getBook_Chapters();

  /**
   * Returns the meta object for class '{@link org.xtext.example.scoping.scoping.DImport <em>DImport</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>DImport</em>'.
   * @see org.xtext.example.scoping.scoping.DImport
   * @generated
   */
  EClass getDImport();

  /**
   * Returns the meta object for the attribute '{@link org.xtext.example.scoping.scoping.DImport#getImportedNamespace <em>Imported Namespace</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute '<em>Imported Namespace</em>'.
   * @see org.xtext.example.scoping.scoping.DImport#getImportedNamespace()
   * @see #getDImport()
   * @generated
   */
  EAttribute getDImport_ImportedNamespace();

  /**
   * Returns the meta object for class '{@link org.xtext.example.scoping.scoping.Chapter <em>Chapter</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>Chapter</em>'.
   * @see org.xtext.example.scoping.scoping.Chapter
   * @generated
   */
  EClass getChapter();

  /**
   * Returns the meta object for the attribute '{@link org.xtext.example.scoping.scoping.Chapter#getName <em>Name</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute '<em>Name</em>'.
   * @see org.xtext.example.scoping.scoping.Chapter#getName()
   * @see #getChapter()
   * @generated
   */
  EAttribute getChapter_Name();

  /**
   * Returns the meta object for the containment reference list '{@link org.xtext.example.scoping.scoping.Chapter#getChapter <em>Chapter</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference list '<em>Chapter</em>'.
   * @see org.xtext.example.scoping.scoping.Chapter#getChapter()
   * @see #getChapter()
   * @generated
   */
  EReference getChapter_Chapter();

  /**
   * Returns the meta object for the containment reference list '{@link org.xtext.example.scoping.scoping.Chapter#getParagraphs <em>Paragraphs</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference list '<em>Paragraphs</em>'.
   * @see org.xtext.example.scoping.scoping.Chapter#getParagraphs()
   * @see #getChapter()
   * @generated
   */
  EReference getChapter_Paragraphs();

  /**
   * Returns the meta object for the containment reference list '{@link org.xtext.example.scoping.scoping.Chapter#getReferences <em>References</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference list '<em>References</em>'.
   * @see org.xtext.example.scoping.scoping.Chapter#getReferences()
   * @see #getChapter()
   * @generated
   */
  EReference getChapter_References();

  /**
   * Returns the meta object for class '{@link org.xtext.example.scoping.scoping.Paragraph <em>Paragraph</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>Paragraph</em>'.
   * @see org.xtext.example.scoping.scoping.Paragraph
   * @generated
   */
  EClass getParagraph();

  /**
   * Returns the meta object for the attribute '{@link org.xtext.example.scoping.scoping.Paragraph#getName <em>Name</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute '<em>Name</em>'.
   * @see org.xtext.example.scoping.scoping.Paragraph#getName()
   * @see #getParagraph()
   * @generated
   */
  EAttribute getParagraph_Name();

  /**
   * Returns the meta object for class '{@link org.xtext.example.scoping.scoping.Reference <em>Reference</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>Reference</em>'.
   * @see org.xtext.example.scoping.scoping.Reference
   * @generated
   */
  EClass getReference();

  /**
   * Returns the meta object for the reference '{@link org.xtext.example.scoping.scoping.Reference#getCref <em>Cref</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the reference '<em>Cref</em>'.
   * @see org.xtext.example.scoping.scoping.Reference#getCref()
   * @see #getReference()
   * @generated
   */
  EReference getReference_Cref();

  /**
   * Returns the meta object for the reference '{@link org.xtext.example.scoping.scoping.Reference#getQnref <em>Qnref</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the reference '<em>Qnref</em>'.
   * @see org.xtext.example.scoping.scoping.Reference#getQnref()
   * @see #getReference()
   * @generated
   */
  EReference getReference_Qnref();

  /**
   * Returns the meta object for the reference '{@link org.xtext.example.scoping.scoping.Reference#getPref <em>Pref</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the reference '<em>Pref</em>'.
   * @see org.xtext.example.scoping.scoping.Reference#getPref()
   * @see #getReference()
   * @generated
   */
  EReference getReference_Pref();

  /**
   * Returns the factory that creates the instances of the model.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the factory that creates the instances of the model.
   * @generated
   */
  ScopingFactory getScopingFactory();

  /**
   * <!-- begin-user-doc -->
   * Defines literals for the meta objects that represent
   * <ul>
   *   <li>each class,</li>
   *   <li>each feature of each class,</li>
   *   <li>each enum,</li>
   *   <li>and each data type</li>
   * </ul>
   * <!-- end-user-doc -->
   * @generated
   */
  interface Literals
  {
    /**
     * The meta object literal for the '{@link org.xtext.example.scoping.scoping.impl.BookImpl <em>Book</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.example.scoping.scoping.impl.BookImpl
     * @see org.xtext.example.scoping.scoping.impl.ScopingPackageImpl#getBook()
     * @generated
     */
    EClass BOOK = eINSTANCE.getBook();

    /**
     * The meta object literal for the '<em><b>Name</b></em>' attribute feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute BOOK__NAME = eINSTANCE.getBook_Name();

    /**
     * The meta object literal for the '<em><b>Imports</b></em>' containment reference list feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference BOOK__IMPORTS = eINSTANCE.getBook_Imports();

    /**
     * The meta object literal for the '<em><b>Chapters</b></em>' containment reference list feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference BOOK__CHAPTERS = eINSTANCE.getBook_Chapters();

    /**
     * The meta object literal for the '{@link org.xtext.example.scoping.scoping.impl.DImportImpl <em>DImport</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.example.scoping.scoping.impl.DImportImpl
     * @see org.xtext.example.scoping.scoping.impl.ScopingPackageImpl#getDImport()
     * @generated
     */
    EClass DIMPORT = eINSTANCE.getDImport();

    /**
     * The meta object literal for the '<em><b>Imported Namespace</b></em>' attribute feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute DIMPORT__IMPORTED_NAMESPACE = eINSTANCE.getDImport_ImportedNamespace();

    /**
     * The meta object literal for the '{@link org.xtext.example.scoping.scoping.impl.ChapterImpl <em>Chapter</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.example.scoping.scoping.impl.ChapterImpl
     * @see org.xtext.example.scoping.scoping.impl.ScopingPackageImpl#getChapter()
     * @generated
     */
    EClass CHAPTER = eINSTANCE.getChapter();

    /**
     * The meta object literal for the '<em><b>Name</b></em>' attribute feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute CHAPTER__NAME = eINSTANCE.getChapter_Name();

    /**
     * The meta object literal for the '<em><b>Chapter</b></em>' containment reference list feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference CHAPTER__CHAPTER = eINSTANCE.getChapter_Chapter();

    /**
     * The meta object literal for the '<em><b>Paragraphs</b></em>' containment reference list feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference CHAPTER__PARAGRAPHS = eINSTANCE.getChapter_Paragraphs();

    /**
     * The meta object literal for the '<em><b>References</b></em>' containment reference list feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference CHAPTER__REFERENCES = eINSTANCE.getChapter_References();

    /**
     * The meta object literal for the '{@link org.xtext.example.scoping.scoping.impl.ParagraphImpl <em>Paragraph</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.example.scoping.scoping.impl.ParagraphImpl
     * @see org.xtext.example.scoping.scoping.impl.ScopingPackageImpl#getParagraph()
     * @generated
     */
    EClass PARAGRAPH = eINSTANCE.getParagraph();

    /**
     * The meta object literal for the '<em><b>Name</b></em>' attribute feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute PARAGRAPH__NAME = eINSTANCE.getParagraph_Name();

    /**
     * The meta object literal for the '{@link org.xtext.example.scoping.scoping.impl.ReferenceImpl <em>Reference</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.example.scoping.scoping.impl.ReferenceImpl
     * @see org.xtext.example.scoping.scoping.impl.ScopingPackageImpl#getReference()
     * @generated
     */
    EClass REFERENCE = eINSTANCE.getReference();

    /**
     * The meta object literal for the '<em><b>Cref</b></em>' reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference REFERENCE__CREF = eINSTANCE.getReference_Cref();

    /**
     * The meta object literal for the '<em><b>Qnref</b></em>' reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference REFERENCE__QNREF = eINSTANCE.getReference_Qnref();

    /**
     * The meta object literal for the '<em><b>Pref</b></em>' reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference REFERENCE__PREF = eINSTANCE.getReference_Pref();

  }

} //ScopingPackage
